// This is your Prisma schema file
// Specify your database connection details here

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define your database models and relationships

model Category {
  id          String       @id @default(uuid()) // Use UUID type for primary key
  name        CategoryName
  description String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  products    Product[]
}

model UserTbl {
  id           String     @id @default(uuid()) // Use UUID type for primary key
  username     String     @unique
  email        String     @unique
  password     String
  name         String
  address      String
  phone_number String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  products     Product[]
  carts        Cart[]
  orders       OrderTbl[]
  reviews      Review[]
}

model Product {
  id          String           @id @default(uuid()) // Use UUID type for primary key
  name        String
  description String?
  price       Decimal
  quantity    Int
  seller_id   String
  category_id String
  images      ProductImage[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  seller      UserTbl          @relation(fields: [seller_id], references: [id])
  category    Category         @relation(fields: [category_id], references: [id])
  variants    ProductVariant[]
  carts       CartItem[]
  order_items OrderItem[]
  reviews     Review[]
}

model Cart {
  id         String     @id @default(uuid()) // Use UUID type for primary key
  user_id    String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user       UserTbl    @relation(fields: [user_id], references: [id])
  cart_items CartItem[]
}

model CartItem {
  id         String   @id @default(uuid()) // Use UUID type for primary key
  cart_id    String
  product_id String
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cart       Cart     @relation(fields: [cart_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
}

model OrderTbl {
  id               String      @id @default(uuid()) // Use UUID type for primary key
  user_id          String
  total_amount     Decimal
  shipping_address String
  status           OrderStatus
  voucher_id       String?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  user             UserTbl     @relation(fields: [user_id], references: [id])
  voucher          Voucher?    @relation(fields: [voucher_id], references: [id])
  order_items      OrderItem[]
  shipping         Shipping[]
}

model OrderItem {
  id         String   @id @default(uuid()) // Use UUID type for primary key
  order_id   String
  product_id String
  quantity   Int
  price      Decimal
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order      OrderTbl @relation(fields: [order_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
}

model Review {
  id         String   @id @default(uuid()) // Use UUID type for primary key
  user_id    String
  product_id String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       UserTbl  @relation(fields: [user_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
}

model ProductVariant {
  id         String         @id @default(uuid()) // Use UUID type for primary key
  product_id String
  color      String
  size       String
  quantity   Int
  images     ProductImage[]
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  product    Product        @relation(fields: [product_id], references: [id])
}

model ProductImage {
  id         String          @id @default(uuid()) // Use UUID type for primary key
  product_id String?
  variant_id String?
  url        String
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  product    Product?        @relation(fields: [product_id], references: [id])
  variant    ProductVariant? @relation(fields: [variant_id], references: [id])
}

model Shipping {
  id          String   @id @default(uuid()) // Use UUID type for primary key
  order_id    String
  address     String
  city        String
  postal_code String
  country     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  order       OrderTbl @relation(fields: [order_id], references: [id])
}

model Voucher {
  id              String              @id @default(uuid()) // Use UUID type for primary key
  code            String              @unique
  discount_type   VoucherDiscountType
  discount_value  Decimal
  expiration_date DateTime
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt
  OrderTbl        OrderTbl[]
}

enum CategoryName {
  CATEGORY_ONE
  CATEGORY_TWO
  CATEGORY_THREE
  // Add more category names as needed
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  // Add more order statuses as needed
}

enum VoucherDiscountType {
  PERCENTAGE
  AMOUNT
  // Add more discount types as needed
}
